# budget.py
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem, QPushButton, QComboBox, \
    QLineEdit, QDialog, QFormLayout, QMessageBox, QMenu, QLabel
from PyQt5.QtCore import Qt, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QColor
import sqlite3
from datetime import datetime, timedelta


class BudgetTab(QWidget):
    limit_updated = pyqtSignal()

    def __init__(self, db, profile_id):
        super().__init__()
        self.db = db
        self.profile_id = profile_id
        self.load_timer = QTimer()
        self.load_timer.setSingleShot(True)
        self.load_timer.timeout.connect(self.load_limits)
        self.notified_limits = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)

        font = QFont()
        font.setPointSize(12)
        self.setFont(font)

        filters_layout = QHBoxLayout()
        filters_layout.setSpacing(10)

        control_font = QFont()
        control_font.setPointSize(12)

        category_label = QLabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:")
        category_label.setFont(control_font)
        filters_layout.addWidget(category_label)

        self.category_combo = QComboBox()
        self.category_combo.setFont(control_font)
        self.category_combo.setFixedHeight(35)
        self.category_combo.addItem("–í—Å–µ")
        self.update_categories()
        self.category_combo.currentTextChanged.connect(self.load_limits)
        filters_layout.addWidget(self.category_combo)

        add_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç")
        add_btn.setFont(control_font)
        add_btn.setFixedHeight(40)
        add_btn.clicked.connect(self.add_limit)
        filters_layout.addStretch()
        filters_layout.addWidget(add_btn)

        layout.addLayout(filters_layout)

        self.table = QTableWidget()
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels(["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–õ–∏–º–∏—Ç", "–û—Å—Ç–∞—Ç–æ–∫", "–ü–µ—Ä–∏–æ–¥"])

        table_font = QFont()
        table_font.setPointSize(14)
        self.table.setFont(table_font)
        self.table.horizontalHeader().setFont(table_font)
        self.table.verticalHeader().setDefaultSectionSize(40)
        self.table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.table.customContextMenuRequested.connect(self.show_context_menu)
        self.table.setSortingEnabled(True)
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.setStyleSheet("""
            QTableWidget {
                font-size: 14px;
            }
            QTableWidget::item {
                text-align: center;
                padding: 5px;
            }
            QHeaderView::section {
                font-size: 14px;
                padding: 5px;
            }
        """)
        layout.addWidget(self.table)

        self.setLayout(layout)
        self.load_limits()

    def update_categories(self):
        self.category_combo.clear()
        self.category_combo.addItem("–í—Å–µ")
        with sqlite3.connect(self.db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM categories WHERE profile_id = ? AND type = '–†–∞—Å—Ö–æ–¥'",
                           (self.profile_id,))
            for cat_id, name in cursor.fetchall():
                self.category_combo.addItem(name, cat_id)

    def get_period_range(self, period):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞"""
        today = datetime.now()
        if period == "–ù–µ–¥–µ–ª—è":
            start = today - timedelta(days=today.weekday())
            end = start + timedelta(days=6)
        elif period == "–ú–µ—Å—è—Ü":
            start = today.replace(day=1)
            end = (start + timedelta(days=32)).replace(day=1) - timedelta(days=1)
        elif period == "–ì–æ–¥":
            start = today.replace(month=1, day=1)
            end = today.replace(month=12, day=31)
        return start.strftime("%Y-%m-%d"), end.strftime("%Y-%m-%d")

    def load_limits(self):
        self.table.setRowCount(0)
        query = """
            SELECT l.id, c.name, l.amount, l.period 
            FROM limits l 
            JOIN categories c ON l.category_id = c.id 
            WHERE l.profile_id = ?
        """
        params = [self.profile_id]
        category_text = self.category_combo.currentText()
        if category_text != "–í—Å–µ":
            category_id = self.category_combo.itemData(self.category_combo.currentIndex())
            if category_id:
                query += " AND l.category_id = ?"
                params.append(category_id)

        with sqlite3.connect(self.db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(query, params)
            for row, (id_, category, limit_amount, period) in enumerate(cursor.fetchall()):
                start_date, end_date = self.get_period_range(period)
                cursor.execute("""
                    SELECT SUM(amount) 
                    FROM transactions 
                    WHERE profile_id = ? AND category_id = ? AND type = '–†–∞—Å—Ö–æ–¥' 
                    AND date BETWEEN ? AND ?
                """, (self.profile_id, self.category_combo.itemData(self.category_combo.findText(category)), start_date,
                      end_date))
                spent = cursor.fetchone()[0] or 0
                remaining = limit_amount - spent

                self.table.insertRow(row)
                self.table.setItem(row, 0, QTableWidgetItem(category))
                self.table.setItem(row, 1, QTableWidgetItem(f"{limit_amount:.2f} ‚ÇΩ"))
                remaining_item = QTableWidgetItem(f"{remaining:.2f} ‚ÇΩ")
                self.table.setItem(row, 2, remaining_item)
                self.table.setItem(row, 3, QTableWidgetItem(period))

                # –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ "–û—Å—Ç–∞—Ç–æ–∫"
                used_percentage = (spent / limit_amount * 100) if limit_amount > 0 else 0
                if used_percentage >= 100:
                    remaining_item.setBackground(QColor("#FF5555"))  # –ö—Ä–∞—Å–Ω—ã–π
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏–º–∏—Ç–∞
                    if id_ not in self.notified_limits and remaining <= 0:
                        QMessageBox.warning(
                            self,
                            "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞",
                            f"–õ–∏–º–∏—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' ({period}) –ø—Ä–µ–≤—ã—à–µ–Ω! –û—Å—Ç–∞—Ç–æ–∫: {remaining:.2f} ‚ÇΩ"
                        )
                        self.notified_limits.add(id_)  # –î–æ–±–∞–≤–ª—è–µ–º ID –ª–∏–º–∏—Ç–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
                elif used_percentage >= 70:
                    remaining_item.setBackground(QColor("#FFFF55"))  # –ñ—ë–ª—Ç—ã–π

                self.table.setRowHeight(row, 40)
                for col in range(4):
                    self.table.item(row, col).setTextAlignment(Qt.AlignCenter)
                item = self.table.item(row, 0)
                if item:
                    item.setData(Qt.UserRole, id_)

        header = self.table.horizontalHeader()
        for i in range(4):
            header.setSectionResizeMode(i, header.Stretch)

    def update_limits(self):
        self.load_timer.start(300)

    def show_context_menu(self, pos):
        menu = QMenu()
        edit_action = menu.addAction("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        delete_action = menu.addAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        action = menu.exec_(self.table.mapToGlobal(pos))
        row = self.table.currentRow()
        if row < 0:
            return
        limit_id = self.table.item(row, 0).data(Qt.UserRole)
        if action == edit_action:
            self.edit_limit(row, limit_id)
        elif action == delete_action:
            self.delete_limit(limit_id)

    def add_limit(self):
        dialog = LimitDialog(self.db, self.profile_id)
        if dialog.exec_():
            self.load_limits()
            self.limit_updated.emit()

    def edit_limit(self, row, limit_id):
        dialog = LimitDialog(self.db, self.profile_id, limit_id)
        if dialog.exec_():
            self.load_limits()
            self.limit_updated.emit()

    def delete_limit(self, limit_id):
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –ª–∏–º–∏—Ç?") == QMessageBox.Yes:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("DELETE FROM limits WHERE id = ? AND profile_id = ?", (limit_id, self.profile_id))
                conn.commit()
            self.notified_limits.discard(limit_id)  # –£–¥–∞–ª—è–µ–º ID –ª–∏–º–∏—Ç–∞ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.load_limits()
            self.limit_updated.emit()


class LimitDialog(QDialog):
    def __init__(self, db, profile_id, limit_id=None):
        super().__init__()
        self.db = db
        self.profile_id = profile_id
        self.limit_id = limit_id
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç" if not self.limit_id else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç")
        self.setMinimumSize(400, 250)

        font = QFont()
        font.setPointSize(12)
        self.setFont(font)

        layout = QFormLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        layout.setLabelAlignment(Qt.AlignRight)

        control_font = QFont()
        control_font.setPointSize(12)

        self.category_combo = QComboBox()
        self.category_combo.setFont(control_font)
        self.category_combo.setFixedHeight(35)
        self.update_categories()
        layout.addRow("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", self.category_combo)

        self.amount_input = QLineEdit()
        self.amount_input.setFont(control_font)
        self.amount_input.setFixedHeight(35)
        self.amount_input.setPlaceholderText("–°—É–º–º–∞ –ª–∏–º–∏—Ç–∞ –≤ ‚ÇΩ")
        layout.addRow("–õ–∏–º–∏—Ç:", self.amount_input)

        self.period_combo = QComboBox()
        self.period_combo.setFont(control_font)
        self.period_combo.setFixedHeight(35)
        self.period_combo.addItems(["–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ì–æ–¥"])
        layout.addRow("–ü–µ—Ä–∏–æ–¥:", self.period_combo)

        button_layout = QHBoxLayout()
        button_layout.setSpacing(15)

        save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_btn.setFont(control_font)
        save_btn.setFixedHeight(40)

        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_btn.setFont(control_font)
        cancel_btn.setFixedHeight(40)

        button_layout.addWidget(save_btn)
        button_layout.addWidget(cancel_btn)
        layout.addRow(button_layout)

        save_btn.clicked.connect(self.save)
        cancel_btn.clicked.connect(self.reject)

        if self.limit_id:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT category_id, amount, period FROM limits WHERE id = ? AND profile_id = ?",
                    (self.limit_id, self.profile_id)
                )
                cat_id, amount, period = cursor.fetchone()
                self.category_combo.setCurrentIndex(self.category_combo.findData(cat_id))
                self.amount_input.setText(str(amount))
                self.period_combo.setCurrentText(period or "–ú–µ—Å—è—Ü")

        self.setLayout(layout)

    def update_categories(self):
        self.category_combo.clear()
        with sqlite3.connect(self.db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM categories WHERE profile_id = ? AND type = '–†–∞—Å—Ö–æ–¥'",
                           (self.profile_id,))
            for cat_id, name in cursor.fetchall():
                self.category_combo.addItem(name, cat_id)

    def save(self):
        try:
            amount = float(self.amount_input.text())
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –ª–∏–º–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            if amount > 1_000_000:
                raise ValueError("–°—É–º–º–∞ –ª–∏–º–∏—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1,000,000 ‚ÇΩ")
            category_id = self.category_combo.itemData(self.category_combo.currentIndex())
            period = self.period_combo.currentText()

            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT id FROM limits WHERE profile_id = ? AND category_id = ? AND period = ? AND id != ?",
                    (self.profile_id, category_id, period, self.limit_id or 0)
                )
                if cursor.fetchone():
                    raise ValueError("–õ–∏–º–∏—Ç –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

                if self.limit_id:
                    cursor.execute(
                        "UPDATE limits SET category_id = ?, amount = ?, period = ? WHERE id = ? AND profile_id = ?",
                        (category_id, amount, period, self.limit_id, self.profile_id)
                    )
                else:
                    cursor.execute(
                        "INSERT INTO limits (profile_id, category_id, amount, period) VALUES (?, ?, ?, ?)",
                        (self.profile_id, category_id, amount, period)
                    )
                conn.commit()
                self.accept()
        except ValueError as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", str(e))
        except sqlite3.Error as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")