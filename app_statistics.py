# app_statistics.py
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QComboBox, QLabel,
                             QPushButton, QFileDialog, QMessageBox, QDateEdit, QSizePolicy)
from PyQt5.QtCore import Qt, QDate, QDateTime
from PyQt5.QtChart import QChart, QPieSeries, QBarCategoryAxis, QValueAxis, QChartView, QBarSeries, QBarSet
from PyQt5 import QtGui
from PyQt5.QtGui import QFont
import sqlite3
import csv
import openpyxl
from datetime import datetime
from dateutil.relativedelta import relativedelta


class StatisticsTab(QWidget):
    def __init__(self, db, profile_id):
        super().__init__()
        self.db = db
        self.profile_id = profile_id
        self.init_ui()

    def init_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(20, 15, 20, 15)
        main_layout.setSpacing(20)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–∞
        font = QFont()
        font.setPointSize(14)
        self.setFont(font)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_layout = QHBoxLayout()
        controls_layout.setSpacing(10)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_font = QFont()
        control_font.setPointSize(13)

        # –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
        period_group = QHBoxLayout()
        period_group.setSpacing(5)
        period_label = QLabel("–ü–µ—Ä–∏–æ–¥:")
        period_label.setFont(control_font)
        period_group.addWidget(period_label)

        self.period_combo = QComboBox()
        self.period_combo.setFont(control_font)
        self.period_combo.setFixedHeight(35)
        self.period_combo.addItems(["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", "–ì–æ–¥", "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π"])
        self.period_combo.currentTextChanged.connect(
            lambda text: self.update_all())  # –õ—è–º–±–¥–∞ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        period_group.addWidget(self.period_combo)

        # –ì—Ä—É–ø–ø–∞ –¥–ª—è –¥–∞—Ç
        self.date_group = QHBoxLayout()
        self.date_group.setSpacing(5)
        from_label = QLabel("—Å")
        from_label.setFont(control_font)
        self.date_group.addWidget(from_label)

        self.date_from = QDateEdit()
        self.date_from.setFont(control_font)
        self.date_from.setFixedHeight(35)
        self.date_from.setCalendarPopup(True)
        self.date_from.setDate(QDate.currentDate().addMonths(-1))
        self.date_from.setVisible(False)
        self.date_from.dateChanged.connect(self.update_all)
        self.date_group.addWidget(self.date_from)

        to_label = QLabel("–ø–æ")
        to_label.setFont(control_font)
        self.date_group.addWidget(to_label)

        self.date_to = QDateEdit()
        self.date_to.setFont(control_font)
        self.date_to.setFixedHeight(35)
        self.date_to.setCalendarPopup(True)
        self.date_to.setDate(QDate.currentDate())
        self.date_to.setVisible(False)
        self.date_to.dateChanged.connect(self.update_all)
        self.date_group.addWidget(self.date_to)

        # –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        type_group = QHBoxLayout()
        type_group.setSpacing(5)
        type_label = QLabel("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:")
        type_label.setFont(control_font)
        type_group.addWidget(type_label)

        self.type_combo = QComboBox()
        self.type_combo.setFont(control_font)
        self.type_combo.setFixedHeight(35)
        self.type_combo.addItems(["–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã", "–î–æ—Ö–æ–¥—ã –∏ –†–∞—Å—Ö–æ–¥—ã"])
        self.type_combo.currentTextChanged.connect(lambda text: self.update_all())  # –õ—è–º–±–¥–∞ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        type_group.addWidget(self.type_combo)

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        controls_layout.addLayout(period_group)
        controls_layout.addLayout(self.date_group)
        controls_layout.addStretch(1)
        controls_layout.addLayout(type_group)

        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_group = QHBoxLayout()
        export_group.setSpacing(10)
        self.csv_export_btn = QPushButton("CSV")
        self.csv_export_btn.setFont(control_font)
        self.csv_export_btn.setFixedSize(120, 35)
        self.xlsx_export_btn = QPushButton("XLSX")
        self.xlsx_export_btn.setFont(control_font)
        self.xlsx_export_btn.setFixedSize(120, 35)
        self.csv_export_btn.clicked.connect(lambda: self.export_data("csv"))
        self.xlsx_export_btn.clicked.connect(lambda: self.export_data("xlsx"))
        export_group.addWidget(self.csv_export_btn)
        export_group.addWidget(self.xlsx_export_btn)

        controls_layout.addLayout(export_group)
        main_layout.addLayout(controls_layout)

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        content_layout = QHBoxLayout()

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        left_panel = QVBoxLayout()
        left_panel.setSpacing(20)

        # –ú–µ—Ç—Ä–∏–∫–∏
        metrics_widget = QWidget()
        metrics_layout = QVBoxLayout(metrics_widget)
        metrics_layout.setContentsMargins(0, 0, 0, 0)
        metrics_layout.setSpacing(15)

        self.balance_label = QLabel("üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: 0 ‚ÇΩ")
        self.balance_label.setStyleSheet("font-size: 18px; font-weight: bold;")
        self.income_label = QLabel("üü¢ –î–æ—Ö–æ–¥—ã: 0 ‚ÇΩ")
        self.income_label.setStyleSheet("font-size: 16px; color: green;")
        self.expense_label = QLabel("üî¥ –†–∞—Å—Ö–æ–¥—ã: 0 ‚ÇΩ")
        self.expense_label.setStyleSheet("font-size: 16px; color: red;")

        metrics_layout.addWidget(self.balance_label)
        metrics_layout.addWidget(self.income_label)
        metrics_layout.addWidget(self.expense_label)
        metrics_layout.addStretch()

        left_panel.addWidget(metrics_widget)

        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        buttons_widget = QWidget()
        buttons_layout = QVBoxLayout(buttons_widget)
        buttons_layout.setContentsMargins(0, 0, 0, 0)
        buttons_layout.setSpacing(15)

        self.pie_btn = QPushButton("–ö—Ä—É–≥–æ–≤–∞—è")
        self.pie_btn.setFont(control_font)
        self.pie_btn.setFixedHeight(45)
        self.bar_income_expense_btn = QPushButton("–î–æ—Ö–æ–¥—ã/–†–∞—Å—Ö–æ–¥—ã")
        self.bar_income_expense_btn.setFont(control_font)
        self.bar_income_expense_btn.setFixedHeight(45)

        self.pie_btn.clicked.connect(self.show_pie_chart)
        self.bar_income_expense_btn.clicked.connect(self.show_bar_chart_income_expense)

        buttons_layout.addWidget(self.pie_btn)
        buttons_layout.addWidget(self.bar_income_expense_btn)
        buttons_layout.addStretch()

        left_panel.addWidget(buttons_widget)
        left_panel.setStretch(0, 1)
        left_panel.setStretch(1, 1)

        content_layout.addLayout(left_panel, stretch=1)

        # –ì—Ä–∞—Ñ–∏–∫
        self.chart_view = QChartView()
        self.chart_view.setRenderHint(QtGui.QPainter.Antialiasing)
        self.chart_view.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        chart_container = QWidget()
        chart_container.setLayout(QVBoxLayout())
        chart_container.layout().setContentsMargins(0, 0, 0, 0)
        chart_container.layout().addWidget(self.chart_view)

        content_layout.addWidget(chart_container, stretch=4)

        main_layout.addLayout(content_layout, stretch=1)

        self.setLayout(main_layout)
        self.update_all()

    def update_all(self):
        try:
            print("update_all called")  # –û—Ç–ª–∞–¥–∫–∞
            self.update_statistics()
            current_chart = self.chart_view.chart()
            if current_chart and current_chart.title() == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
                self.show_pie_chart()
            elif current_chart and current_chart.title() == "–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–∞–º":
                self.show_bar_chart_income_expense()

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –¥–∞—Ç –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            period = self.period_combo.currentText()
            is_custom = period == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π"
            self.date_from.setVisible(is_custom)
            self.date_to.setVisible(is_custom)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ update_all: {e}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    def update_statistics(self):
        try:
            period = self.period_combo.currentText()
            query = (
                "SELECT SUM(CASE WHEN [type] = '–î–æ—Ö–æ–¥' THEN amount ELSE 0 END) as income, "
                "SUM(CASE WHEN [type] = '–†–∞—Å—Ö–æ–¥' THEN amount ELSE 0 END) as expense "
                "FROM transactions WHERE profile_id = ?"
            )
            params = [self.profile_id]
            today = datetime.now()
            print(f"update_statistics - Today: {today}, Period: {period}")  # –û—Ç–ª–∞–¥–∫–∞
            if period == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
                query += " AND date LIKE ?"
                params.append(f"{today.strftime('%Y-%m')}%")
            elif period == "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü":
                year = today.year
                month = today.month
                if month == 1:
                    year -= 1
                    month = 12
                else:
                    month -= 1
                last_month = today.replace(year=year, month=month)
                print(f"update_statistics - Last month: {last_month}")  # –û—Ç–ª–∞–¥–∫–∞
                query += " AND date LIKE ?"
                params.append(f"{last_month.strftime('%Y-%m')}%")
            elif period == "–ì–æ–¥":
                query += " AND date LIKE ?"
                params.append(f"{today.strftime('%Y')}%")
            elif period == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π":
                query += " AND date BETWEEN ? AND ?"
                params.extend(
                    [self.date_from.date().toString("yyyy-MM-dd"), self.date_to.date().toString("yyyy-MM-dd")])
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(query, params)
                result = cursor.fetchone()
                print(f"update_statistics - Result: {result}")  # –û—Ç–ª–∞–¥–∫–∞
                if result:
                    income, expense = result
                    income = float(income or 0)
                    expense = float(expense or 0)
                    balance = income - expense
                    self.balance_label.setText(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ")
                    self.income_label.setText(f"üü¢ –î–æ—Ö–æ–¥—ã: {income:.2f} ‚ÇΩ")
                    self.expense_label.setText(f"üî¥ –†–∞—Å—Ö–æ–¥—ã: {expense:.2f} ‚ÇΩ")
                else:
                    self.balance_label.setText("üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: 0.00 ‚ÇΩ")
                    self.income_label.setText("üü¢ –î–æ—Ö–æ–¥—ã: 0.00 ‚ÇΩ")
                    self.expense_label.setText("üî¥ –†–∞—Å—Ö–æ–¥—ã: 0.00 ‚ÇΩ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ update_statistics: {e}")
            raise  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

    def show_pie_chart(self):
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            current_type = self.type_combo.currentText()
            if not current_type:
                current_type = "–î–æ—Ö–æ–¥—ã"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤—ã–±–æ—Ä –ø—É—Å—Ç–æ–π

            # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
            self.type_combo.blockSignals(True)
            self.type_combo.clear()
            self.type_combo.addItems(["–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã"])
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.type_combo.setCurrentText(current_type)
            self.type_combo.setEnabled(True)
            self.type_combo.blockSignals(False)

            series = QPieSeries()
            period = self.period_combo.currentText()
            type_filter = self.type_combo.currentText()
            print(f"Pie chart - Period: {period}, Type: {type_filter}")  # –û—Ç–ª–∞–¥–∫–∞
            query = (
                "SELECT c.name, SUM(t.amount) "
                "FROM transactions t JOIN categories c ON t.category_id = c.id "
                "WHERE t.profile_id = ?"
            )
            params = [self.profile_id]
            today = datetime.now()
            if period == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
                query += " AND t.date LIKE ?"
                params.append(f"{today.strftime('%Y-%m')}%")
            elif period == "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü":
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü –≤—Ä—É—á–Ω—É—é
                year = today.year
                month = today.month
                if month == 1:
                    year -= 1
                    month = 12
                else:
                    month -= 1
                last_month = today.replace(year=year, month=month)
                query += " AND t.date LIKE ?"
                params.append(f"{last_month.strftime('%Y-%m')}%")
            elif period == "–ì–æ–¥":
                query += " AND t.date LIKE ?"
                params.append(f"{today.strftime('%Y')}%")
            elif period == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π":
                query += " AND t.date BETWEEN ? AND ?"
                params.extend(
                    [self.date_from.date().toString("yyyy-MM-dd"), self.date_to.date().toString("yyyy-MM-dd")])
            if type_filter == "–î–æ—Ö–æ–¥—ã":
                query += " AND t.[type] = '–î–æ—Ö–æ–¥'"
            elif type_filter == "–†–∞—Å—Ö–æ–¥—ã":
                query += " AND t.[type] = '–†–∞—Å—Ö–æ–¥'"
            query += " GROUP BY c.id"
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(query, params)
                data = cursor.fetchall()
                print(f"Pie chart data: {data}")  # –û—Ç–ª–∞–¥–∫–∞
                if not data:
                    QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    return
                total = sum(row[1] for row in data)
                colors = [QtGui.QColor(c) for c in [
                    '#FF6384',  # –†–æ–∑–æ–≤—ã–π
                    '#36A2EB',  # –°–∏–Ω–∏–π
                    '#FFCE56',  # –ñ–µ–ª—Ç—ã–π
                    '#4BC0C0',  # –ë–∏—Ä—é–∑–æ–≤—ã–π
                    '#9966FF',  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                    '#FF9F40',  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    '#7BE041',  # –ó–µ–ª–µ–Ω—ã–π
                    '#FF6F61',  # –ö–æ—Ä–∞–ª–ª–æ–≤—ã–π
                    '#6B5B95',  # –¢–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
                    '#88B04B',  # –û–ª–∏–≤–∫–æ–≤—ã–π
                    '#F7CAC9',  # –°–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π
                ]]
                for i, (name, amount) in enumerate(data):
                    slice_ = series.append(name, amount)
                    percentage = amount / total * 100
                    if percentage >= 2:
                        slice_.setLabel(f"{name} {percentage:.1f}%")
                        slice_.setLabelVisible(True)
                        slice_.setLabelFont(QFont("Arial", 12))
                    slice_.setColor(colors[i % len(colors)])

            chart = QChart()
            chart.addSeries(series)
            chart.setTitle("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            chart.setTitleFont(QFont("Arial", 16))
            chart.legend().setVisible(True)
            chart.legend().setFont(QFont("Arial", 12))
            chart.setAnimationOptions(QChart.SeriesAnimations)
            self.chart_view.setChart(chart)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ show_pie_chart: {e}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É: {e}")


    def show_bar_chart_income_expense(self):
        try:
            print("show_bar_chart_income_expense called")  # –û—Ç–ª–∞–¥–∫–∞
            # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
            self.type_combo.blockSignals(True)
            self.type_combo.clear()
            self.type_combo.addItems(["–î–æ—Ö–æ–¥—ã –∏ –†–∞—Å—Ö–æ–¥—ã"])
            self.type_combo.setCurrentText("–î–æ—Ö–æ–¥—ã –∏ –†–∞—Å—Ö–æ–¥—ã")
            self.type_combo.setEnabled(False)
            self.type_combo.blockSignals(False)

            period = self.period_combo.currentText()
            query = (
                "SELECT t.date, "
                "SUM(CASE WHEN [type] = '–î–æ—Ö–æ–¥' THEN amount ELSE 0 END) as income, "
                "SUM(CASE WHEN [type] = '–†–∞—Å—Ö–æ–¥' THEN amount ELSE 0 END) as expense "
                "FROM transactions t WHERE t.profile_id = ?"
            )
            params = [self.profile_id]
            today = datetime.now()
            print(f"Bar chart - Period: {period}, Profile ID: {self.profile_id}")  # –û—Ç–ª–∞–¥–∫–∞
            if period == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
                query += " AND t.date LIKE ?"
                params.append(f"{today.strftime('%Y-%m')}%")
            elif period == "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü":
                year = today.year
                month = today.month
                if month == 1:
                    year -= 1
                    month = 12
                else:
                    month -= 1
                last_month = today.replace(year=year, month=month)
                query += " AND t.date LIKE ?"
                params.append(f"{last_month.strftime('%Y-%m')}%")
            elif period == "–ì–æ–¥":
                query += " AND t.date LIKE ?"
                params.append(f"{today.strftime('%Y')}%")
            elif period == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π":
                query += " AND t.date BETWEEN ? AND ?"
                params.extend(
                    [self.date_from.date().toString("yyyy-MM-dd"), self.date_to.date().toString("yyyy-MM-dd")])
            query += " GROUP BY t.date ORDER BY t.date"
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(query, params)
                data = cursor.fetchall()
                print(f"Bar chart data: {data}")  # –û—Ç–ª–∞–¥–∫–∞
                if not data:
                    print("No data returned from query")  # –û—Ç–ª–∞–¥–∫–∞
                    QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã")
                    chart = QChart()
                    chart.setTitle("–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–∞–º")
                    chart.setTitleFont(QFont("Arial", 16))
                    axis_x = QBarCategoryAxis()
                    axis_x.setLabelsFont(QFont("Arial", 10))
                    chart.addAxis(axis_x, Qt.AlignBottom)
                    axis_y = QValueAxis()
                    axis_y.setLabelFormat("%.2f ‚ÇΩ")
                    axis_y.setTitleText("–°—É–º–º–∞ (‚ÇΩ)")
                    axis_y.setTitleFont(QFont("Arial", 12))
                    axis_y.setRange(0, 1000)
                    axis_y.setLabelsFont(QFont("Arial", 10))
                    chart.addAxis(axis_y, Qt.AlignLeft)
                    self.chart_view.setChart(chart)
                    return

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∏—Å–∫–ª—é—á–∞—è –¥–∞—Ç—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            filtered_data = [(d, i, e) for d, i, e in data if i > 0 or e > 0]
            if not filtered_data:
                print("No non-zero data after filtering")  # –û—Ç–ª–∞–¥–∫–∞
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return
            dates = [row[0] for row in filtered_data]
            incomes = [float(row[1]) for row in filtered_data]
            expenses = [float(row[2]) for row in filtered_data]
            print(f"Filtered Dates: {dates}, Incomes: {incomes}, Expenses: {expenses}")  # –û—Ç–ª–∞–¥–∫–∞

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories = [QDateTime.fromString(d, "yyyy-MM-dd").toString("dd.MM") for d in dates]
            print(f"Categories: {categories}")  # –û—Ç–ª–∞–¥–∫–∞

            # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            income_set = QBarSet("–î–æ—Ö–æ–¥—ã")
            expense_set = QBarSet("–†–∞—Å—Ö–æ–¥—ã")
            income_set.setColor(QtGui.QColor("green"))
            expense_set.setColor(QtGui.QColor("red"))
            income_set.append(incomes)
            expense_set.append(expenses)

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é (–±–µ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è)
            series = QBarSeries()
            series.append(income_set)  # –î–æ—Ö–æ–¥—ã
            series.append(expense_set)  # –†–∞—Å—Ö–æ–¥—ã
            series.setBarWidth(0.35)
            print(f"Bar series count: {series.count()}")  # –û—Ç–ª–∞–¥–∫–∞

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart = QChart()
            chart.addSeries(series)
            chart.setTitle("–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–∞–º")
            chart.setTitleFont(QFont("Arial", 16))
            chart.setAnimationOptions(QChart.SeriesAnimations)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—å X (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
            axis_x = QBarCategoryAxis()
            axis_x.append(categories)
            axis_x.setLabelsFont(QFont("Arial", 10))
            chart.addAxis(axis_x, Qt.AlignBottom)
            series.attachAxis(axis_x)
            print(f"Axis X categories: {axis_x.categories()}")  # –û—Ç–ª–∞–¥–∫–∞

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—å Y (—Å—É–º–º—ã)
            axis_y = QValueAxis()
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –º–µ—Ç–æ–∫
            label_font = QFont("Arial Unicode MS", 10)  # –ü—Ä–æ–±—É–µ–º Times New Roman
            axis_y.setLabelsFont(label_font)
            axis_y.setLabelFormat("%.2f ")  # –§–æ—Ä–º–∞—Ç —Å —Å–∏–º–≤–æ–ª–æ–º —Ä—É–±–ª—è
            axis_y.setTitleText("–°—É–º–º–∞ (‚ÇΩ)")
            axis_y.setTitleFont(QFont("Arial Unicode MS", 12))
            max_value = max(max(incomes, default=0), max(expenses, default=0)) * 1.2
            axis_y.setRange(0, max_value if max_value > 0 else 1000)
            chart.addAxis(axis_y, Qt.AlignLeft)
            series.attachAxis(axis_y)
            print(f"Axis Y range: 0 to {axis_y.max()}")  # –û—Ç–ª–∞–¥–∫–∞
            print(f"Axis Y label format: {axis_y.labelFormat()}")  # –û—Ç–ª–∞–¥–∫–∞

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–µ–≥–µ–Ω–¥—É
            chart.legend().setVisible(True)
            chart.legend().setFont(QFont("Arial", 10))
            chart.legend().setAlignment(Qt.AlignBottom)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            self.chart_view.setChart(chart)
            self.chart_view.setRenderHint(QtGui.QPainter.Antialiasing)
            print("Chart set to chart_view")  # –û—Ç–ª–∞–¥–∫–∞
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ show_bar_chart_income_expense: {e}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É: {e}")

    def export_data(self, format_):
        period = self.period_combo.currentText()
        type_filter = self.type_combo.currentText()
        query = (
            "SELECT t.date, c.name, t.[type], t.amount, t.description "
            "FROM transactions t JOIN categories c ON t.category_id = c.id "
            "WHERE t.profile_id = ?"
        )
        params = [self.profile_id]
        today = datetime.now()
        if period == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
            query += " AND t.date LIKE ?"
            params.append(f"{today.strftime('%Y-%m')}%")
        elif period == "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü":
            last_month = today - relativedelta(months=1)
            query += " AND t.date LIKE ?"
            params.append(f"{last_month.strftime('%Y-%m')}%")
        elif period == "–ì–æ–¥":
            query += " AND t.date LIKE ?"
            params.append(f"{today.strftime('%Y')}%")
        elif period == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π":
            query += " AND t.date BETWEEN ? AND ?"
            params.extend([self.date_from.date().toString("yyyy-MM-dd"), self.date_to.date().toString("yyyy-MM-dd")])
        if type_filter == "–î–æ—Ö–æ–¥—ã":
            query += " AND t.[type] = '–î–æ—Ö–æ–¥'"
        elif type_filter == "–†–∞—Å—Ö–æ–¥—ã":
            query += " AND t.[type] = '–†–∞—Å—Ö–æ–¥'"
        # –î–ª—è "–î–æ—Ö–æ–¥—ã –∏ –†–∞—Å—Ö–æ–¥—ã" –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        with sqlite3.connect(self.db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(query, params)
            data = cursor.fetchall()
            if not data:
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            if format_ == "csv":
                file_path, _ = QFileDialog.getSaveFileName(self, "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", f"transactions_{timestamp}.csv",
                                                           "CSV Files (*.csv)")
                if file_path:
                    with open(file_path, 'w', newline='', encoding='utf-8') as f:
                        writer = csv.writer(f)
                        writer.writerow(["–î–∞—Ç–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–¢–∏–ø", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"])
                        writer.writerows(data)
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV")
            elif format_ == "xlsx":
                file_path, _ = QFileDialog.getSaveFileName(self, "–≠–∫—Å–ø–æ—Ä—Ç –≤ XLSX", f"transactions_{timestamp}.xlsx",
                                                           "XLSX Files (*.xlsx)")
                if file_path:
                    wb = openpyxl.Workbook()
                    ws = wb.active
                    ws.title = "Transactions"
                    ws.append(["–î–∞—Ç–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–¢–∏–ø", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"])
                    for row in data:
                        ws.append(row)
                    wb.save(file_path)
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ XLSX")